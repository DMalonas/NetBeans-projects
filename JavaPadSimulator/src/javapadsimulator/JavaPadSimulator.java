
package javapadsimulator;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;


public class JavaPadSimulator extends javax.swing.JFrame {

    /**
     * Creates new form JavaPad
     */
    public JavaPadSimulator() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        openFile = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        saveAs = new javax.swing.JButton();
        save = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        openFile.setText("open file");
        openFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileActionPerformed(evt);
            }
        });

        clear.setText("clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        saveAs.setText("save as");
        saveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsActionPerformed(evt);
            }
        });

        save.setText("save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        jLabel1.setText("status...");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(openFile)
                                .addGap(18, 18, 18)
                                .addComponent(clear)
                                .addGap(18, 18, 18)
                                .addComponent(save)
                                .addGap(18, 18, 18)
                                .addComponent(saveAs))
                            .addComponent(jLabel1))
                        .addGap(0, 74, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openFile)
                    .addComponent(clear)
                    .addComponent(save)
                    .addComponent(saveAs))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileActionPerformed

        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text files", "txt");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            jLabel1.setText("Opening file abs path: " + chooser.getSelectedFile().getAbsolutePath());
            workingFile = chooser.getSelectedFile();
            
            FileReader fileReader = null;
            BufferedReader bufferedReader = null;
            
            try {
                fileReader = new FileReader(workingFile);
                bufferedReader = new BufferedReader(fileReader);
                            
                String line = bufferedReader.readLine();
                jTextArea1.setText("");
                while(line != null)
                {
                    jTextArea1.append(line + "\n");
                    line = bufferedReader.readLine();
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(JavaPadSimulator.class.getName()).log(
                        Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(JavaPadSimulator.class.getName()).log(
                        Level.SEVERE, null, ex);
            } finally {
                try {
                    bufferedReader.close();
                    fileReader.close();
                } catch (IOException ex) {
                    Logger.getLogger(JavaPadSimulator.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } // if approve file chooser
    }//GEN-LAST:event_openFileActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        workingFile = null;
        jTextArea1.setText("");
    }//GEN-LAST:event_clearActionPerformed

    private void saveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsActionPerformed
        saveWorkingFileAs();
    }//GEN-LAST:event_saveAsActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        if(workingFile != null)
            saveWorkingFile();
        else
        {
            saveWorkingFileAs();
        }
    }//GEN-LAST:event_saveActionPerformed

    /**
     * saves any changes to the working file
     */
    private void saveWorkingFile() {
        // save just overwrites the working document with the text in jTextArea
        jLabel1.setText("Saving file: " + workingFile);
        
        FileWriter fileWriter = null;
        BufferedWriter bufferedWriter = null;
        
        try {
            fileWriter = new FileWriter(workingFile);
            bufferedWriter = new BufferedWriter(fileWriter);
            jTextArea1.write(bufferedWriter);

        } catch (IOException ex) {
            Logger.getLogger(JavaPadSimulator.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                bufferedWriter.close();
                fileWriter.close();
            } catch (IOException ex) {
                Logger.getLogger(JavaPadSimulator.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private void saveWorkingFileAs() {
        // first change the working file to user selected
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text files", "txt");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showSaveDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            String absPath = chooser.getSelectedFile().getAbsolutePath();
            if (absPath.endsWith(".txt"))
                workingFile = chooser.getSelectedFile();
            else
                workingFile = new File(chooser.getSelectedFile() + ".txt");
            
            // then save the working file
            saveWorkingFile();
        }
    }
    public static void main(String[] args) {
  /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JavaPadSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JavaPadSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JavaPadSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JavaPadSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                JavaPadSimulator jp = new JavaPadSimulator();
                jp.setTitle("JavaPad version 1.0");
                jp.setVisible(true);
            }
        });
    }
    
    
    private File workingFile;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton openFile;
    private javax.swing.JButton save;
    private javax.swing.JButton saveAs;
    // End of variables declaration//GEN-END:variables
    
}
